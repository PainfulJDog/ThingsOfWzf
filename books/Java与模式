结构型图：类图
类图：类图描述一些类、包的静态结构和它们之间的静态关系
描述一个设计模式的行为特性：状态图、时序图。
状态图：描述一系列对象的内部状态及状态的变化和转移。注意一个类不能有两个不同的状态图
时序图：时序图是一种相互作用图，描述不同对象之间信息传递的时序

类图中的关系：
一般化关系：类与类、接口与接口的继承关系
关联关系：一个类作为另一个类的属性，一对一、一对多、多对多等，两个类是处于同一层次的，如司机和汽车。
聚合关系：关联关系的一种，强关联关系。整体与个体的关系，如汽车和发动机、轮胎。
合成关系：关联关系的一种，比聚合关系强。整体负责部分的生命周期，部分不能共享。一个人和他的四肢。
依赖关系：一般在Java中体现为局部变量、方法的形参，对静态方法的调用。如果B是A的局部变量的类型，那么A依赖于B，如果A调用B的静态方法，A依赖于B。


开闭原则OCP：一个软件实体应该对扩展开放，对修改关闭。（在不修改源代码的情况下改变这个模块的行为）
如何做？
1、确定抽象层，可以是一个抽象类或接口，给出所有扩展情形的行为。
2、增加新的实现类

对可变性的封装原则EVP：找到一个系统的可变因素，将之封装起来。
1、继承，应当被看作是封装变化的方法，而不应该被认为是从一般的对象生成特殊的对象的方法。
2、一种可变性不应当与另一种可变性混合在一起。类的继承结构一般不超过两层，否则可能将两种不同的可变性混合在了一起。
举例：MessageService接口不能预见所有发送Message的类别，假如今天发送营销短信A，明天可能要发送B类短信，后天可能要发送C类短信，不能直接在
MessageService接口定义sendA()、sendB（）...这样的方法，应该定义一个send()方法，这样不管发送何种短信，MessageService接口都是稳定的。这就是将
可变因素封装起来。

里氏代换原则：任何基类可以出现的地方，子类一定可以出现。
依赖倒转原则：要依赖于抽象，不要依赖于实现。
合成/聚合复用原则：要尽可能使用合成/聚合，而不是继承关系达到复用的目的。设计师应该首先考虑合成/聚合关系，里氏替换原则要求确定继承关系符合一定条件。
迪米特法则：一个软件实体应当与尽可能少的其他实体发生相互作用。
接口隔离原则：通信应当尽可能的窄。

简单工厂：抽象产品类
工厂方法：抽象产品类，工厂接口
抽象工厂：多个子产品（产品部件）接口，工厂接口，在工厂接口中对多个产品部件进行组合，生成特定的产品工厂。

将条件转移语句改写成多态性
判断：若是条件语句实现的是可变性的业务逻辑，使用多态重构是符合开闭原则的；若条件语句涉及的业务逻辑不具有可变性，则不需要多态，这叫“多态性污染”。


